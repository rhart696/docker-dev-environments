#!/bin/bash

# Deploy Auto-Commit to Another Project
# Handles projects with security hooks intelligently

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Get target project path
TARGET_PROJECT="${1:-}"

if [ -z "$TARGET_PROJECT" ]; then
    echo -e "${RED}Error: Please provide target project path${NC}"
    echo "Usage: $0 /path/to/project"
    echo ""
    echo "Example:"
    echo "  $0 ~/code/clients/website-mq-studio"
    exit 1
fi

# Resolve full path
TARGET_PROJECT=$(realpath "$TARGET_PROJECT")

if [ ! -d "$TARGET_PROJECT/.git" ]; then
    echo -e "${RED}Error: $TARGET_PROJECT is not a git repository${NC}"
    exit 1
fi

echo -e "${BLUE}=== Deploying Auto-Commit to $TARGET_PROJECT ===${NC}"
echo ""

# Check if project has security hooks
HOOKS_PATH=$(cd "$TARGET_PROJECT" && git config --get core.hooksPath 2>/dev/null || echo "")

if [ -n "$HOOKS_PATH" ] && [ -d "$HOOKS_PATH" ]; then
    echo -e "${YELLOW}⚠️  Security hooks detected at: $HOOKS_PATH${NC}"

    # Check if it's the problematic security hook
    if [ -f "$HOOKS_PATH/pre-commit" ] && grep -q "password\|secret\|api.*key\|token" "$HOOKS_PATH/pre-commit" 2>/dev/null; then
        echo -e "${YELLOW}⚠️  Found security scanning pre-commit hook${NC}"
        echo -e "${BLUE}ℹ️  Will deploy enhanced version with smart hook handling${NC}"
        USE_ENHANCED=true
    else
        USE_ENHANCED=false
    fi
else
    echo -e "${GREEN}✅ No problematic hooks detected${NC}"
    USE_ENHANCED=false
fi

# Create scripts directory in target project if needed
mkdir -p "$TARGET_PROJECT/scripts"

# Copy appropriate script version
if [ "$USE_ENHANCED" = true ]; then
    echo -e "${BLUE}Installing enhanced auto-commit script...${NC}"
    cp "$(dirname "$0")/auto-commit-enhanced.sh" "$TARGET_PROJECT/scripts/auto-commit.sh"

    # Configure for smart hook handling
    cat > "$TARGET_PROJECT/.auto-commit-config" << EOF
# Auto-Commit Configuration for $TARGET_PROJECT
# Generated by deploy-auto-commit.sh

# Smart hook handling to prevent hanging
AUTO_COMMIT_SKIP_HOOKS=smart
AUTO_COMMIT_HOOK_TIMEOUT=10

# Commit interval (seconds)
AUTO_COMMIT_INTERVAL=300

# Auto-push to remote
AUTO_PUSH=false

# Batch size
AUTO_COMMIT_BATCH_SIZE=10
EOF

    echo -e "${GREEN}✅ Enhanced script installed with smart hook handling${NC}"
else
    echo -e "${BLUE}Installing standard auto-commit script...${NC}"
    cp "$(dirname "$0")/auto-commit.sh" "$TARGET_PROJECT/scripts/auto-commit.sh"
    echo -e "${GREEN}✅ Standard script installed${NC}"
fi

# Make script executable
chmod +x "$TARGET_PROJECT/scripts/auto-commit.sh"

# Create convenience aliases
cat > "$TARGET_PROJECT/.auto-commit-aliases" << 'EOF'
#!/bin/bash
# Auto-Commit Aliases - source this file or add to .bashrc

alias ac-start="./scripts/auto-commit.sh watch"
alias ac-daemon="./scripts/auto-commit.sh daemon"
alias ac-stop="./scripts/auto-commit.sh stop"
alias ac-status="./scripts/auto-commit.sh status"
alias ac-once="./scripts/auto-commit.sh once"
EOF

# Setup the auto-commit system
cd "$TARGET_PROJECT"
./scripts/auto-commit.sh setup

echo ""
echo -e "${GREEN}✅ Auto-commit successfully deployed to $TARGET_PROJECT${NC}"
echo ""
echo -e "${BLUE}Quick Start Commands:${NC}"
echo "  cd $TARGET_PROJECT"
echo "  ./scripts/auto-commit.sh status    # Check status"
echo "  ./scripts/auto-commit.sh watch     # Start watching"
echo "  ./scripts/auto-commit.sh daemon    # Run in background"
echo ""

if [ "$USE_ENHANCED" = true ]; then
    echo -e "${YELLOW}⚠️  Enhanced Features Enabled:${NC}"
    echo "  • Smart hook detection and bypass"
    echo "  • Automatic timeout for hanging hooks"
    echo "  • Manual security checks suggested after commits"
    echo ""
    echo -e "${BLUE}Test hooks before starting:${NC}"
    echo "  cd $TARGET_PROJECT"
    echo "  ./scripts/auto-commit.sh test-hooks"
fi

echo ""
echo -e "${GREEN}Ready to use!${NC}"