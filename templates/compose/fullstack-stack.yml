version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - .:/workspace:cached
      - ${HOME}/.ssh:/home/vscode/.ssh:ro
      - node_modules:/workspace/frontend/node_modules
      - backend_venv:/workspace/backend/.venv
    environment:
      # Database connections
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/devdb
      - MONGODB_URI=mongodb://mongodb:27017/devdb
      - REDIS_URL=redis://redis:6379

      # Service URLs
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin

      # Development settings
      - NODE_ENV=development
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
      - rabbitmq
      - minio
    networks:
      - dev-network
    ports:
      - "3000:3000"  # Frontend
      - "8000:8000"  # Backend API
      - "5173:5173"  # Vite dev server
      - "9229:9229"  # Node.js debugging
    command: sleep infinity

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_DB=devdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=devdb
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - dev-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Development tools (optional - use with --profile tools)
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - dev-network
    depends_on:
      - postgres
    profiles:
      - tools

  redisinsight:
    image: redislabs/redisinsight:latest
    ports:
      - "8001:8001"
    volumes:
      - redisinsight-data:/db
    networks:
      - dev-network
    profiles:
      - tools

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - dev-network
    depends_on:
      - elasticsearch
    profiles:
      - tools

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dev-network
    profiles:
      - tools

volumes:
  postgres-data:
  mongo-data:
  redis-data:
  elasticsearch-data:
  rabbitmq-data:
  minio-data:
  redisinsight-data:
  node_modules:
  backend_venv:

networks:
  dev-network:
    driver: bridge